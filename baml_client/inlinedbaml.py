# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "basic.baml": "function GetCompletion(message: string) -> string {\n    client \"openai/gpt-5-nano\"\n    prompt #\"\n        {{ _.role('user') }}\n        {{ message }}\n    \"#\n}\n\nclass LibrariesAndLanguages {\n    used_libraries string[]\n    supported_languages string[]\n}\n\nfunction ExtractLibrariesAndLanguages(description: string) -> LibrariesAndLanguages {\n    client \"openai/gpt-5-nano\"\n    prompt #\"\n        {{ _.role('user') }}\n        The following is a description of a large language model:\n\n        ''' \n        {{ description }}\n        '''\n\n        Extract the following information from the description:\n        1. The libraries the model was trained on.\n        2. The supported languages.\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nclass MyUserMessage {\n  role \"user\" | \"assistant\"\n  content string\n}\nfunction ChatWithLLM(messages: MyUserMessage[]) -> string {\n  client \"openai/gpt-5-nano\"\n  prompt #\"\n    Answer the user's questions based on the chat history:\n    {% for message in messages %}\n      {{ _.role(message.role) }} \n      {{ message.content }}\n    {% endfor %}\n    Answer:\n  \"#\n}\n\ntest TestName {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"Hello!\"\n      }\n      {\n        role \"assistant\"\n        content \"Hi!\"\n      }\n    ]\n  }\n}\n\nclass GetWeatherAPI {\n    location string\n}\n\nclass Message {\n    content string\n}\n\nfunction ToolCallOrMessage(message: string) -> Message | GetWeatherAPI {\n  client \"openai/gpt-5-nano\"\n  prompt #\"\n    {{ _.role('user') }}\n    You are an agent that can either answer the user's question directly or call a tool to get more information.\n\n    Here is the message from the user:\n    {{ message }}\n\n    Decide whether to answer the user's question directly or call the tool.\n\n    {{ ctx.output_format }}\n  \"#\n}",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> NemotronOnModal {\n  provider openai-generic\n  options {\n    model \"nvidia/NVIDIA-Nemotron-Nano-9B-v2\"\n    base_url \"<YOUR_MODAL_APP_URL>/v1\"  // e.g. https://your-app-name.modal.run/v1\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.207.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
}

def get_baml_files():
    return _file_map